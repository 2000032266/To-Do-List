{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["API_URL","App","tasks","setTasks","useState","title","setTitle","description","setDescription","filter","setFilter","editingTask","setEditingTask","useEffect","fetchTasks","async","response","axios","get","data","error","console","React","createElement","className","onSubmit","e","preventDefault","put","id","status","post","type","placeholder","value","onChange","target","required","onClick","map","task","key","toggleStatus","startEditing","delete","deleteTask","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.242819fe.chunk.js","sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [filter, setFilter] = useState('all');\n  const [editingTask, setEditingTask] = useState(null);\n\n  useEffect(() => {\n    fetchTasks();\n  }, [filter]);\n\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get(`${API_URL}/tasks${filter !== 'all' ? `?filter=${filter}` : ''}`);\n      setTasks(response.data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (editingTask) {\n        await axios.put(`${API_URL}/tasks/${editingTask.id}`, {\n          title,\n          description,\n          status: editingTask.status\n        });\n        setEditingTask(null);\n      } else {\n        await axios.post(`${API_URL}/tasks`, { title, description });\n      }\n      setTitle('');\n      setDescription('');\n      fetchTasks();\n    } catch (error) {\n      console.error('Error saving task:', error);\n    }\n  };\n\n  const toggleStatus = async (task) => {\n    try {\n      await axios.put(`${API_URL}/tasks/${task.id}`, {\n        ...task,\n        status: task.status === 'completed' ? 'pending' : 'completed'\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n\n  const deleteTask = async (id) => {\n    try {\n      await axios.delete(`${API_URL}/tasks/${id}`);\n      fetchTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const startEditing = (task) => {\n    setEditingTask(task);\n    setTitle(task.title);\n    setDescription(task.description);\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-center mb-4\">Task Manager</h1>\n      \n      {/* Task Form */}\n      <div className=\"card mb-4\">\n        <div className=\"card-body\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Task Title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"mb-3\">\n              <textarea\n                className=\"form-control\"\n                placeholder=\"Task Description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              {editingTask ? 'Update Task' : 'Add Task'}\n            </button>\n            {editingTask && (\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary ms-2\"\n                onClick={() => {\n                  setEditingTask(null);\n                  setTitle('');\n                  setDescription('');\n                }}\n              >\n                Cancel\n              </button>\n            )}\n          </form>\n        </div>\n      </div>\n\n      {/* Filter Buttons */}\n      <div className=\"btn-group mb-4\">\n        <button\n          className={`btn ${filter === 'all' ? 'btn-primary' : 'btn-outline-primary'}`}\n          onClick={() => setFilter('all')}\n        >\n          All\n        </button>\n        <button\n          className={`btn ${filter === 'pending' ? 'btn-primary' : 'btn-outline-primary'}`}\n          onClick={() => setFilter('pending')}\n        >\n          Pending\n        </button>\n        <button\n          className={`btn ${filter === 'completed' ? 'btn-primary' : 'btn-outline-primary'}`}\n          onClick={() => setFilter('completed')}\n        >\n          Completed\n        </button>\n      </div>\n\n      {/* Task List */}\n      <div className=\"list-group\">\n        {tasks.map((task) => (\n          <div\n            key={task.id}\n            className=\"list-group-item list-group-item-action\"\n          >\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <div className=\"flex-grow-1\">\n                <h5\n                  className={`mb-1 ${\n                    task.status === 'completed' ? 'text-decoration-line-through' : ''\n                  }`}\n                >\n                  {task.title}\n                </h5>\n                <p className=\"mb-1\">{task.description}</p>\n              </div>\n              <div className=\"btn-group\">\n                <button\n                  className={`btn btn-sm ${\n                    task.status === 'completed' ? 'btn-success' : 'btn-outline-success'\n                  }`}\n                  onClick={() => toggleStatus(task)}\n                >\n                  ✓\n                </button>\n                <button\n                  className=\"btn btn-sm btn-outline-primary\"\n                  onClick={() => startEditing(task)}\n                >\n                  ✎\n                </button>\n                <button\n                  className=\"btn btn-sm btn-outline-danger\"\n                  onClick={() => deleteTask(task.id)}\n                >\n                  ×\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}